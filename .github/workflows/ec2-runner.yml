name: ssb CI/CD

on:
  push:
    branches: ["master"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn

      - name: Build
        run: yarn build

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create Remote Directories
        run: |
          ssh -i ~/.ssh/ec2_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            mkdir -p ~/app/dist
            mkdir -p ~/app/prisma
            mkdir -p ~/app/src/base_images
          EOF

      - name: Deploy to EC2
        run: |
          # Copy dist directory (contains all built files)
          scp -i ~/.ssh/ec2_key -r dist/* ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app/dist/
          
          # Copy essential files
          scp -i ~/.ssh/ec2_key package.json yarn.lock ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app/
          
          # Copy prisma directory
          scp -i ~/.ssh/ec2_key -r prisma/* ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app/prisma/

          # Copy base_image files
          scp -i ~/.ssh/ec2_key -r src/base_images/* ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app/src/base_images/

      - name: Create .env file
        run: |
          ssh -i ~/.ssh/ec2_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo '${{ secrets.PROD_SECRET_FILE }}' > ~/app/.env"

      - name: Install Production Dependencies
        run: |
          ssh -i ~/.ssh/ec2_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/app
            yarn install --production
          EOF

      - name: Run Database Migrations
        run: |
          ssh -i ~/.ssh/ec2_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/app
            yarn db:migrate:production
          EOF

      - name: Restart Application
        run: |
          ssh -i ~/.ssh/ec2_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/app
            if pm2 list | grep -q app; then
              pm2 restart app
            else
              pm2 start dist/index.js --name app
            fi
            pm2 save
          EOF